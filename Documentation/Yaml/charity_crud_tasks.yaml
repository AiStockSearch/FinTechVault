epic:
  id: 1cff2f1e-074b-4a7d-a9ba-89ce0fb3045c
  title: Charity CRUD
  priority: Medium
  duration_weeks: 10
  dependencies:
    - 844b680c-1095-4a51-aa8f-799ac92e78f1 # Infrastructure Setup
    - 438c90a2-9cb3-459a-81f1-9ff3360cfd7a # Auth
    - 6974e0e3-cfb2-4f34-8131-85618ddf947b # Wallet
    - ccfe0a81-ba8a-47cb-a200-05dc88dba9bb # Article Publication
    - c5d6e7f8-0a1b-4c2d-9d3e-6e9f0a1b2c3d # WebSocket Notification Service
  api_integration_feasibility: false
  api_documentation: []
  tasks:
    - id: FE1
      title: Campaign Creation UI
      priority: High
      hours: 80
      description: Develop a UI for creating charitable campaigns with details and funding goals.
      functionality:
        - Form: Title, description, goal ($5,000 min), duration
        - Validation: Required fields, goal format
        - Preview: Campaign summary
        - Notification: Toast on campaign creation
      api:
        endpoint: /api/charity/create
        request:
          method: POST
          path: /api/charity/create
          headers:
            Authorization: Bearer {token}
          body:
            userId: u123
            title: Clean Water Initiative
            description: Provide clean water to communities
            goal: 5000
            duration: 30d
        response:
          status: 200
          body:
            campaignId: 123
            status: pending
      deployment: Client
      acceptance_criteria:
        minimal:
          - Create campaign with $5,000 goal
          - Toast notification on success
        full:
          - Support 1,000 creations/min
          - Localization (RU, EN)
          - WCAG 2.1
        error:
          - Invalid goal: Show "Invalid Goal Amount"
          - API error: Show "Creation Failed"
      prompt: How to create a charity campaign UI in React Native? Examples of form validation.
    - id: FE2
      title: Campaign List UI
      priority: Medium
      hours: 60
      description: UI for listing and browsing charitable campaigns with filters.
      functionality:
        - Table: Title, goal, raised, status
        - Filters: Category, status, date
        - Pagination: 20 campaigns/page
        - Notification: Toast on list refresh
      api:
        endpoint: /api/charity/list
        request:
          method: GET
          path: /api/charity/list?category=health&status=active
          headers:
            Authorization: Bearer {token}
          body: {}
        response:
          status: 200
          body:
            campaigns:
              - id: 123
                title: Clean Water Initiative
                goal: 5000
                raised: 2000
                status: active
            total: 100
      deployment: Client
      acceptance_criteria:
        minimal:
          - Display 10 active campaigns
          - Toast notification on refresh
        full:
          - Support 1,000 campaigns/min, 5 filters
          - Localization (RU, EN)
          - WCAG 2.1
        error:
          - No campaigns: Show "No Campaigns Found"
          - API error: Show "List Fetch Failed"
      prompt: How to create a campaign list UI in Wails? Examples of pagination.
    - id: FE3
      title: Donation UI
      priority: High
      hours: 60
      description: UI for making donations to campaigns via Cosmos.
      functionality:
        - Form: Amount ($500 min), asset (USDT), wallet
        - Confirmation: Modal with gas estimate
        - Animation: Donation progress
        - Notification: Toast on donation success
      api:
        endpoint: /api/charity/donate
        request:
          method: POST
          path: /api/charity/donate
          headers:
            Authorization: Bearer {token}
          body:
            userId: u123
            campaignId: 123
            amount: 500
            asset: USDT
            walletAddress: cosmos1xyz...
        response:
          status: 200
          body:
            donationId: 456
            status: completed
            txHash: cosmos_tx_789...
      deployment: Client
      acceptance_criteria:
        minimal:
          - Donate 500 USDT to campaign
          - Toast notification on success
        full:
          - Support 1,000 donations/min, 2 assets
          - Localization (RU, EN)
          - WCAG 2.1
        error:
          - Invalid amount: Show "Invalid Amount"
          - API error: Show "Donation Failed"
      prompt: How to create a donation UI in React Native with Cosmos? Examples of gas estimation.
    - id: FE4
      title: Campaign Analytics UI
      priority: Medium
      hours: 60
      description: Dashboard for campaign donation analytics with graphs.
      functionality:
        - Graphs: Donations over time, donor count (Recharts)
        - Filters: Date, campaign
        - Export: CSV
        - Notification: Toast on export
      api:
        endpoint: /api/charity/analytics
        request:
          method: GET
          path: /api/charity/analytics?campaignId=123&startDate=2025-06-01
          headers:
            Authorization: Bearer {token}
          body: {}
        response:
          status: 200
          body:
            data:
              - date: 2025-06-01
                donations: 1000
                donors: 50
      deployment: Client
      acceptance_criteria:
        minimal:
          - Display donation graph for campaign
          - Toast notification on export
        full:
          - 5 metrics, CSV export, 1,000 updates/min
          - Localization (RU, EN)
          - WCAG 2.1
        error:
          - Empty data: Show "No Data"
          - Export failure: Show "Export Failed"
      prompt: How to create a charity analytics dashboard in Wails? Examples of Recharts.
    - id: FE5
      title: DAO Voting UI for Campaigns
      priority: Medium
      hours: 60
      description: UI for DAO-based voting on campaign approvals or updates.
      functionality:
        - Form: Vote (yes/no), WTH token amount
        - Display: Vote progress, results
        - Notification: Toast on vote submission
        - Animation: Vote progress bar
      api:
        endpoint: /api/charity/vote
        request:
          method: POST
          path: /api/charity/vote
          headers:
            Authorization: Bearer {token}
          body:
            userId: u123
            campaignId: 123
            vote: yes
            tokens: 200
        response:
          status: 200
          body:
            voteId: 789
            status: submitted
      deployment: Client
      acceptance_criteria:
        minimal:
          - Submit yes vote with 200 WTH tokens
          - Toast notification on success
        full:
          - Support 1,000 votes/min, progress display
          - Localization (RU, EN)
          - WCAG 2.1
        error:
          - Insufficient tokens: Show "Insufficient Tokens"
          - API error: Show "Vote Failed"
      prompt: How to create a DAO voting UI in React Native? Examples of vote progress bars.
    - id: FE6
      title: Charity Notifications UI
      priority: Medium
      hours: 60
      description: UI for real-time notifications related to charity actions (e.g., donation received, campaign approved).
      functionality:
        - Toast notifications: Donation success, campaign update
        - Notification history: Type, message, timestamp
        - WebSocket integration
        - Animation: Fade-in toasts
      api:
        endpoint: /ws/notifications
        request:
          method: WebSocket
          path: ws://api.wealthproject.com/ws/notifications?userId=u123
          headers:
            Authorization: Bearer {token}
          body: {}
        response:
          status: 200
          body:
            type: charity
            message: Donation of 500 USDT received
            timestamp: 2025-06-15T12:00:00Z
      deployment: Client
      acceptance_criteria:
        minimal:
          - Display toast for donation
          - History shows 10 notifications
        full:
          - 1,000 notifications/min, animations
          - Localization (RU, EN)
          - WCAG 2.1
        error:
          - WebSocket disconnect: Show "Connection Lost"
          - No notifications: Show "No Notifications"
      prompt: How to implement WebSocket notifications for charity actions in Wails? Examples of toast animations.
    - id: BE1
      title: Campaign Creation Service
      priority: High
      hours: 80
      description: Backend for creating and storing charitable campaigns with DAO approval.
      functionality:
        - Creation: Store campaign details
        - DAO: Submit for approval (200 WTH min)
        - Storage: PostgreSQL, IPFS for content
        - Notification: Trigger WebSocket on creation
        - Logging: ELK Stack
      api:
        endpoint: /api/charity/create
        request:
          method: POST
          path: /api/charity/create
          headers:
            Authorization: Bearer {token}
          body:
            userId: u123
            title: Clean Water Initiative
            description: Provide clean water to communities
            goal: 5000
            duration: 30d
        response:
          status: 200
          body:
            campaignId: 123
            status: pending
      deployment: Server (AWS EC2)
      acceptance_criteria:
        minimal:
          - Create campaign with $5,000 goal
          - Send WebSocket notification
        full:
          - 1,000 creations/min, DAO integration
          - ELK logs
        error:
          - Invalid goal: 400 error, ELK log
          - DAO failure: 500 error, ELK log
      prompt: How to create a charity campaign backend with DAO approval? Examples of IPFS storage.
    - id: BE2
      title: Campaign Update Service
      priority: Medium
      hours: 60
      description: Backend for updating campaign details via DAO governance.
      functionality:
        - Updates: Title, description, goal
        - DAO: Require vote for changes
        - Notification: Trigger WebSocket on update
        - Logging: ELK Stack
      api:
        endpoint: /api/charity/update
        request:
          method: PUT
          path: /api/charity/update
          headers:
            Authorization: Bearer {token}
          body:
            userId: u123
            campaignId: 123
            title: Updated Clean Water Initiative
        response:
          status: 200
          body:
            campaignId: 123
            status: updated
      deployment: Server (AWS EC2)
      acceptance_criteria:
        minimal:
          - Update campaign title
          - Send WebSocket notification
        full:
          - 1,000 updates/min, DAO voting
          - ELK logs
        error:
          - Invalid campaign: 404 error, ELK log
          - DAO failure: 403 error, ELK log
      prompt: How to update charity campaigns with DAO governance? Examples of update APIs.
    - id: BE3
      title: Campaign Deletion Service
      priority: Low
      hours: 40
      description: Backend for deleting campaigns with IPFS and DAO approval.
      functionality:
        - Deletion: Remove campaign from IPFS, PostgreSQL
        - DAO: Require vote for deletion
        - Notification: Trigger WebSocket on deletion
        - Logging: ELK Stack
      api:
        endpoint: /api/charity/delete
        request:
          method: DELETE
          path: /api/charity/delete
          headers:
            Authorization: Bearer {token}
          body:
            userId: u123
            campaignId: 123
        response:
          status: 200
          body:
            status: deleted
      deployment: Server (AWS EC2)
      acceptance_criteria:
        minimal:
          - Delete campaign
          - Send WebSocket notification
        full:
          - 1,000 deletions/min, DAO voting
          - ELK logs
        error:
          - Invalid campaign: 404 error, ELK log
          - DAO failure: 403 error, ELK log
      prompt: How to delete charity campaigns with DAO approval? Examples of IPFS deletion.
    - id: BE4
      title: Donation Processing Service
      priority: High
      hours: 80
      description: Backend for processing donations to campaigns via Cosmos.
      functionality:
        - Donations: USDT transfers on Cosmos
        - Validation: Sufficient balance, campaign status
        - Storage: PostgreSQL for records
        - Notification: Trigger WebSocket on donation
        - Logging: ELK Stack
      api:
        endpoint: /api/charity/donate
        request:
          method: POST
          path: /api/charity/donate
          headers:
            Authorization: Bearer {token}
          body:
            userId: u123
            campaignId: 123
            amount: 500
            asset: USDT
            walletAddress: cosmos1xyz...
        response:
          status: 200
          body:
            donationId: 456
            status: completed
            txHash: cosmos_tx_789...
      deployment: Server (AWS EC2)
      acceptance_criteria:
        minimal:
          - Process 500 USDT donation
          - Send WebSocket notification
        full:
          - 1,000 donations/min, 2 assets
          - ELK logs
        error:
          - Insufficient balance: 400 error, ELK log
          - Campaign closed: 403 error, ELK log
      prompt: How to process donations on Cosmos? Examples of Cosmos SDK APIs.
    - id: BE5
      title: Charity Analytics Service
      priority: Medium
      hours: 60
      description: Backend for collecting campaign donation analytics with Matomo.
      functionality:
        - Metrics: Donations, donor count
        - Integration: Matomo for user behavior
        - Notification: Trigger WebSocket for updates
        - Logging: ELK Stack
      api:
        endpoint: /api/charity/analytics
        request:
          method: GET
          path: /api/charity/analytics?campaignId=123&startDate=2025-06-01
          headers:
            Authorization: Bearer {token}
          body: {}
        response:
          status: 200
          body:
            data:
              - date: 2025-06-01
                donations: 1000
                donors: 50
      deployment: Server (AWS EC2)
      acceptance_criteria:
        minimal:
          - Track 10 donations in Matomo
          - Send WebSocket notification
        full:
          - 1,000 records/min, 5 metrics
          - ELK logs
        error:
          - Invalid campaign: 404 error, ELK log
          - Matomo failure: CloudWatch alert
      prompt: How to collect charity analytics with Matomo? Examples of analytics APIs.
    - id: BE6
      title: Charity WebSocket Service
      priority: Medium
      hours: 60
      description: Backend for real-time campaign updates (e.g., donations, votes) via WebSocket.
      functionality:
        - Updates: Donation received, campaign status
        - Broadcast: WebSocket to clients
        - Queue: Redis for buffering
        - Logging: ELK Stack
      api:
        endpoint: /ws/charity
        request:
          method: WebSocket
          path: ws://api.wealthproject.com/ws/charity?campaignId=123
          headers:
            Authorization: Bearer {token}
          body: {}
        response:
          status: 200
          body:
            campaignId: 123
            type: donation
            message: Donation of 500 USDT received
            timestamp: 2025-06-15T12:00:00Z
      deployment: Server (AWS EC2)
      acceptance_criteria:
        minimal:
          - Broadcast donation update
          - Redis queue processes 100 messages
        full:
          - 1,000 updates/min
          - ELK logs
        error:
          - WebSocket failure: CloudWatch alert
          - Queue overflow: ELK log
      prompt: How to implement real-time campaign updates with WebSocket? Examples of Redis queuing.
    - id: BE7
      title: Charity Testing
      priority: Medium
      hours: 60
      description: Testing for campaign CRUD, donation, analytics, and WebSocket services.
      functionality:
        - Unit tests: Jest for APIs
        - Load tests: Locust (10,000 requests/min)
        - Penetration tests: Burp Suite
      api:
        endpoint: None
        request: {}
        response: {}
      deployment: Server (CI/CD)
      acceptance_criteria:
        minimal:
          - 90% test coverage
          - OWASP audit passed
        full:
          - 99% uptime, < 50ms response
          - Vulnerabilities fixed
        error:
          - Test failure: Jira ticket
          - Vulnerability found: ELK log
      prompt: How to test charity CRUD services with Locust? Examples of test cases.
    - id: BE8
      title: Charity Notifications Service
      priority: Medium
      hours: 60
      description: Backend to generate and broadcast charity-related notifications via WebSocket.
      functionality:
        - Triggers: Donation received, campaign approved
        - Broadcast: WebSocket to clients
        - Queue: Redis for buffering
        - Logging: ELK Stack
      api:
        endpoint: /ws/notifications
        request:
          method: WebSocket
          path: ws://api.wealthproject.com/ws/notifications?userId=u123
          headers:
            Authorization: Bearer {token}
          body: {}
        response:
          status: 200
          body:
            type: charity
            message: Donation of 500 USDT received
            timestamp: 2025-06-15T12:00:00Z
      deployment: Server (AWS EC2)
      acceptance_criteria:
        minimal:
          - Broadcast donation notification
          - Redis queue processes 100 messages
        full:
          - 1,000 notifications/min
          - ELK logs
          - Grafana metrics
        error:
          - WebSocket failure: CloudWatch alert
          - Queue overflow: ELK log
      prompt: How to set up a WebSocket notification service for charity actions? Examples of Redis queuing.
services:
  - name: Charity Management Service
    description: Manages charitable campaigns and donations
    type: API
    deployment: AWS EC2
    dependencies:
      - PostgreSQL
      - IPFS
      - Redis
      - ELK Stack
  - name: WebSocket Notification Service
    description: Real-time notifications for charity actions
    type: WebSocket
    deployment: AWS EC2
    dependencies:
      - Redis
      - ELK Stack
infrastructure:
  servers:
    - name: Charity Management
      type: AWS EC2
      specs:
        instance: m5.xlarge
        cores: 4
        ram: 16GB
    - name: WebSocket Notification
      type: AWS EC2
      specs:
        instance: m5.xlarge
        cores: 4
        ram: 16GB
  storage: 12TB (S3, IPFS, PostgreSQL)
  cost: $6000-$12000/month
  monitoring:
    - ELK Stack
    - Prometheus/Grafana
    - Matomo
    - CloudWatch
